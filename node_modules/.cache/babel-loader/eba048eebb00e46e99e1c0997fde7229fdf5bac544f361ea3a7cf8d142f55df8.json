{"ast":null,"code":"var _jsxFileName = \"/home/aldan/Desktop/projects/Lush Void/tokenquill/github/TulpaTalk/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useReducer, forwardRef, useImperativeHandle, useCallback } from 'react';\nimport ChatInput from './ChatInput';\nimport ChatHistory from './ChatHistory';\nimport { fetchBotReply } from './hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultState = {\n  chats: JSON.parse(localStorage.getItem('chats')) || [],\n  selectedChatIndex: 0,\n  isLoading: false\n};\nconst chatReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'SEND_USER_MESSAGE':\n      return {\n        ...state,\n        chats: state.chats.map((chat, index) => index === state.selectedChatIndex ? {\n          ...chat,\n          chatHistory: [...(chat.chatHistory || []), action.payload.userMessage, action.payload.botReply]\n        } : chat),\n        isLoading: true\n      };\n    case 'UPDATE_BOT_REPLY':\n      return {\n        ...state,\n        chats: state.chats.map((chat, index) => index === state.selectedChatIndex ? {\n          ...chat,\n          chatHistory: (chat.chatHistory || []).map(message => {\n            var _state$chats$state$se;\n            return message.role === (((_state$chats$state$se = state.chats[state.selectedChatIndex].persona) === null || _state$chats$state$se === void 0 ? void 0 : _state$chats$state$se.name) || '') && message.timestamp === action.payload.timestamp ? {\n              ...message,\n              content: action.payload.botReplyText\n            } : message;\n          })\n        } : chat),\n        isLoading: action.payload.isBotTyping\n      };\n    case 'SET_LOADING_STATE':\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case 'CLEAR_CHAT':\n      return {\n        ...state,\n        chats: state.chats.map((chat, index) => index === state.selectedChatIndex ? {\n          ...chat,\n          chatHistory: []\n        } : chat)\n      };\n    case 'SET_SELECTED_CHAT_INDEX':\n      return {\n        ...state,\n        selectedChatIndex: action.payload\n      };\n    case 'UPDATE_CHAT_HISTORY':\n      return {\n        ...state,\n        chats: state.chats.map((chat, index) => index === state.selectedChatIndex ? {\n          ...chat,\n          chatHistory: action.payload\n        } : chat)\n      };\n    case 'UPDATE_CHATS':\n      return {\n        ...state,\n        chats: action.payload\n      };\n    default:\n      return state;\n  }\n};\nconst Chat = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s(({\n  systemSettings,\n  selectedChatIndex,\n  chats,\n  setChats\n}, ref) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, defaultState);\n  const messageEndRef = useRef(null);\n\n  // Guard against undefined selectedChat\n  const selectedChat = state.chats[state.selectedChatIndex] || {};\n  useImperativeHandle(ref, () => ({\n    clearChat: () => dispatch({\n      type: 'CLEAR_CHAT'\n    })\n  }));\n  useEffect(() => {\n    dispatch({\n      type: 'SET_SELECTED_CHAT_INDEX',\n      payload: selectedChatIndex\n    });\n  }, [selectedChatIndex, state.chats]);\n  useEffect(() => {\n    if (selectedChat.chatHistory) {\n      scrollToBottom();\n    }\n  }, [selectedChat.chatHistory]);\n  useEffect(() => {\n    dispatch({\n      type: 'UPDATE_CHATS',\n      payload: chats\n    });\n  }, [chats]);\n  const scrollToBottom = () => {\n    var _messageEndRef$curren;\n    (_messageEndRef$curren = messageEndRef.current) === null || _messageEndRef$curren === void 0 ? void 0 : _messageEndRef$curren.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const selectedChatRef = useRef(selectedChat);\n  useEffect(() => {\n    selectedChatRef.current = selectedChat;\n  }, [selectedChat]);\n  const sendMessage = async userMessage => {\n    if (!userMessage.trim()) return;\n    const timestamp = Date.now();\n    const persona = selectedChat.persona;\n    const newUserMessage = {\n      role: 'user',\n      content: userMessage,\n      timestamp: timestamp\n    };\n    const botReplyPlaceholder = {\n      role: (persona === null || persona === void 0 ? void 0 : persona.name) || 'bot',\n      content: '',\n      timestamp: timestamp + 1\n    };\n    const updatedChatHistory = [...(selectedChat.chatHistory || []), newUserMessage, botReplyPlaceholder];\n    dispatch({\n      type: 'UPDATE_CHAT_HISTORY',\n      payload: updatedChatHistory\n    });\n    try {\n      const startFetchTime = Date.now(); // Start timing before fetching the bot's reply\n\n      const actualBotReply = await fetchBotReply(botReplyPlaceholder.timestamp, updatedChatHistory, updateBotReply, persona, dispatch);\n      const endFetchTime = Date.now(); // End timing after receiving the bot's reply\n\n      if (actualBotReply) {\n        const cps = actualBotReply.content.length / ((endFetchTime - startFetchTime) / 1000);\n        console.log(`Characters per second: ${cps}`);\n        const chatHistoryWithoutPlaceholder = updatedChatHistory.filter(message => message.timestamp !== botReplyPlaceholder.timestamp);\n        const finalUpdatedChatHistory = [...chatHistoryWithoutPlaceholder, actualBotReply];\n        dispatch({\n          type: 'UPDATE_CHAT_HISTORY',\n          payload: finalUpdatedChatHistory\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching bot reply:', error);\n      const chatHistoryWithError = updatedChatHistory.map(message => {\n        if (message.timestamp === botReplyPlaceholder.timestamp) {\n          return {\n            ...message,\n            content: 'Error: Could not get reply.'\n          };\n        }\n        return message;\n      });\n      dispatch({\n        type: 'UPDATE_CHAT_HISTORY',\n        payload: chatHistoryWithError\n      });\n    }\n  };\n  const updateBotReply = useCallback((timestamp, botReplyText, isBotTyping) => {\n    dispatch({\n      type: 'UPDATE_BOT_REPLY',\n      payload: {\n        timestamp,\n        botReplyText,\n        isBotTyping\n      }\n    });\n  }, [dispatch]);\n  useEffect(() => {\n    localStorage.setItem('chats', JSON.stringify(state.chats));\n  }, [state.chats]);\n  const handleUpdateChatHistory = updatedHistory => {\n    dispatch({\n      type: 'UPDATE_CHAT_HISTORY',\n      payload: updatedHistory\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(ChatHistory, {\n      chatHistory: selectedChat.chatHistory || [],\n      isLoading: state.isLoading,\n      updateChatHistory: handleUpdateChatHistory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSendMessage: sendMessage,\n      isLoading: state.isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n}, \"qAY/rzNZzvdHLLeoZLGvzC8fzZU=\")), \"qAY/rzNZzvdHLLeoZLGvzC8fzZU=\");\n_c2 = Chat;\nexport default _c3 = /*#__PURE__*/React.memo(Chat);\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Chat$forwardRef\");\n$RefreshReg$(_c2, \"Chat\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["React","useEffect","useRef","useReducer","forwardRef","useImperativeHandle","useCallback","ChatInput","ChatHistory","fetchBotReply","jsxDEV","_jsxDEV","defaultState","chats","JSON","parse","localStorage","getItem","selectedChatIndex","isLoading","chatReducer","state","action","type","map","chat","index","chatHistory","payload","userMessage","botReply","message","_state$chats$state$se","role","persona","name","timestamp","content","botReplyText","isBotTyping","Chat","_s","_c","systemSettings","setChats","ref","dispatch","messageEndRef","selectedChat","clearChat","scrollToBottom","_messageEndRef$curren","current","scrollIntoView","behavior","selectedChatRef","sendMessage","trim","Date","now","newUserMessage","botReplyPlaceholder","updatedChatHistory","startFetchTime","actualBotReply","updateBotReply","endFetchTime","cps","length","console","log","chatHistoryWithoutPlaceholder","filter","finalUpdatedChatHistory","error","chatHistoryWithError","setItem","stringify","handleUpdateChatHistory","updatedHistory","className","children","updateChatHistory","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","_c2","_c3","memo","$RefreshReg$"],"sources":["/home/aldan/Desktop/projects/Lush Void/tokenquill/github/TulpaTalk/src/components/Chat.js"],"sourcesContent":["import React, { useEffect, useRef, useReducer, forwardRef, useImperativeHandle, useCallback } from 'react';\nimport ChatInput from './ChatInput';\nimport ChatHistory from './ChatHistory';\nimport { fetchBotReply } from './hooks';\n\n\nconst defaultState = {\n  chats: JSON.parse(localStorage.getItem('chats')) || [],\n  selectedChatIndex: 0,\n  isLoading: false,\n};\n\nconst chatReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'SEND_USER_MESSAGE':\n      return {\n        ...state,\n        chats: state.chats.map((chat, index) =>\n          index === state.selectedChatIndex\n            ? {\n                ...chat,\n                chatHistory: [...(chat.chatHistory || []), action.payload.userMessage, action.payload.botReply],\n              }\n            : chat\n        ),\n        isLoading: true,\n      };\n    case 'UPDATE_BOT_REPLY':\n      return {\n        ...state,\n        chats: state.chats.map((chat, index) =>\n          index === state.selectedChatIndex\n            ? {\n                ...chat,\n                chatHistory: (chat.chatHistory || []).map((message) =>\n                  message.role === (state.chats[state.selectedChatIndex].persona?.name || '') && message.timestamp === action.payload.timestamp\n                    ? { ...message, content: action.payload.botReplyText }\n                    : message\n                ),\n              }\n            : chat\n        ),\n        isLoading: action.payload.isBotTyping,\n      };\n    case 'SET_LOADING_STATE':\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    case 'CLEAR_CHAT':\n      return {\n        ...state,\n        chats: state.chats.map((chat, index) =>\n          index === state.selectedChatIndex ? { ...chat, chatHistory: [] } : chat\n        ),\n      };\n    case 'SET_SELECTED_CHAT_INDEX':\n      return {\n        ...state,\n        selectedChatIndex: action.payload,\n      };\n    case 'UPDATE_CHAT_HISTORY':\n      return {\n        ...state,\n        chats: state.chats.map((chat, index) =>\n          index === state.selectedChatIndex ? { ...chat, chatHistory: action.payload } : chat\n        ),\n      };\n    case 'UPDATE_CHATS':\n      return {\n        ...state,\n        chats: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst Chat = forwardRef(({ systemSettings, selectedChatIndex, chats, setChats }, ref) => {\n  const [state, dispatch] = useReducer(chatReducer, defaultState);\n\n\n  const messageEndRef = useRef(null);\n\n  // Guard against undefined selectedChat\n  const selectedChat = state.chats[state.selectedChatIndex] || {};\n\n  useImperativeHandle(ref, () => ({\n    clearChat: () => dispatch({ type: 'CLEAR_CHAT' }),\n  }));\n\n  useEffect(() => {\n    dispatch({ type: 'SET_SELECTED_CHAT_INDEX', payload: selectedChatIndex });\n  }, [selectedChatIndex, state.chats]);\n\n  useEffect(() => {\n    if (selectedChat.chatHistory) {\n      scrollToBottom();\n    }\n  }, [selectedChat.chatHistory]);\n\n  useEffect(() => {\n    dispatch({ type: 'UPDATE_CHATS', payload: chats });\n  }, [chats]);\n\n\n  const scrollToBottom = () => {\n    messageEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const selectedChatRef = useRef(selectedChat);\n  useEffect(() => {\n    selectedChatRef.current = selectedChat;\n  }, [selectedChat]);\n\n\n  const sendMessage = async (userMessage) => {\n    if (!userMessage.trim()) return;\n\n    const timestamp = Date.now();\n    const persona = selectedChat.persona;\n\n    const newUserMessage = {\n      role: 'user',\n      content: userMessage,\n      timestamp: timestamp,\n    };\n    const botReplyPlaceholder = {\n      role: persona?.name || 'bot',\n      content: '',\n      timestamp: timestamp + 1,\n    };\n\n    const updatedChatHistory = [...(selectedChat.chatHistory || []), newUserMessage, botReplyPlaceholder];\n\n    dispatch({ type: 'UPDATE_CHAT_HISTORY', payload: updatedChatHistory });\n\n    try {\n      const startFetchTime = Date.now(); // Start timing before fetching the bot's reply\n\n      const actualBotReply = await fetchBotReply(\n        botReplyPlaceholder.timestamp,\n        updatedChatHistory,\n        updateBotReply,\n        persona,\n        dispatch\n      );\n\n      const endFetchTime = Date.now(); // End timing after receiving the bot's reply\n\n      if (actualBotReply) {\n        const cps = actualBotReply.content.length / ((endFetchTime - startFetchTime) / 1000);\n        console.log(`Characters per second: ${cps}`);\n\n        const chatHistoryWithoutPlaceholder = updatedChatHistory.filter(message => message.timestamp !== botReplyPlaceholder.timestamp);\n        const finalUpdatedChatHistory = [...chatHistoryWithoutPlaceholder, actualBotReply];\n\n        dispatch({ type: 'UPDATE_CHAT_HISTORY', payload: finalUpdatedChatHistory });\n      }\n    } catch (error) {\n      console.error('Error fetching bot reply:', error);\n      const chatHistoryWithError = updatedChatHistory.map(message => {\n        if (message.timestamp === botReplyPlaceholder.timestamp) {\n          return { ...message, content: 'Error: Could not get reply.' };\n        }\n        return message;\n      });\n      dispatch({ type: 'UPDATE_CHAT_HISTORY', payload: chatHistoryWithError });\n    }\n  };\n\n\n\n\n\n  const updateBotReply = useCallback((timestamp, botReplyText, isBotTyping) => {\n    dispatch({ type: 'UPDATE_BOT_REPLY', payload: { timestamp, botReplyText, isBotTyping } });\n  }, [dispatch]);\n\n  useEffect(() => {\n    localStorage.setItem('chats', JSON.stringify(state.chats));\n  }, [state.chats]);\n\n  const handleUpdateChatHistory = (updatedHistory) => {\n    dispatch({ type: 'UPDATE_CHAT_HISTORY', payload: updatedHistory });\n  };\n\n\n  return (\n    <div className=\"chat-container\">\n      <ChatHistory chatHistory={selectedChat.chatHistory || []} isLoading={state.isLoading} updateChatHistory={handleUpdateChatHistory} />\n      <ChatInput onSendMessage={sendMessage} isLoading={state.isLoading} />\n      <span>test</span>\n    </div>\n\n  );\n});\n\nexport default React.memo(Chat);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}