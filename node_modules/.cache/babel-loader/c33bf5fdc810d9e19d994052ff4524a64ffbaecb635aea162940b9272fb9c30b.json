{"ast":null,"code":"var _jsxFileName = \"/home/aldan/Desktop/projects/Lush Void/tokenquill/github/TulpaTalk/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useMemo } from 'react';\nimport Chat from './components/Chat';\nimport ChatControlButtons from './components/ChatControlButtons';\nimport PersonaSettings from './components/PersonaSettings';\nimport ChatSidebar from './components/SideBar';\nimport './App.css';\nimport Logo from './imgs/QuillBot.png';\nimport tq from './persona';\nimport useChat from './hooks/useChat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _selectedChat$persona, _selectedChat$persona2;\n  const [showSettings, setShowSettings] = useState(false);\n  const {\n    chats,\n    setChats,\n    selectedChatIndex,\n    setSelectedChatIndex\n  } = useChat();\n  const chatRef = useRef();\n  const [models, setModels] = useState([]);\n  console.log('rendered app');\n  const selectedChat = chats[selectedChatIndex] || {};\n  const handleChangePersona = () => setShowSettings(!showSettings);\n  const handlePersonaChange = updatedPersona => {\n    const updatedChats = [...chats];\n    updatedChats[selectedChatIndex].persona = updatedPersona;\n    setChats(updatedChats);\n  };\n  const handleSaveSettings = () => setShowSettings(false);\n  const fetchLocalModels = async () => {\n    try {\n      const response = await fetch('http://localhost:11434/api/tags');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Local Models:', data.models);\n      if (data.models && data.models.length > 0) {\n        setModels(data.models.map(model => model.name.split(':latest')[0])); // Update models state\n        const latestModel = data.models[data.models.length - 1];\n        updateDefaultPersonaModel(latestModel.name);\n      }\n    } catch (error) {\n      console.error('Failed to fetch local models:', error);\n    }\n  };\n  const updateDefaultPersonaModel = modelName => {\n    var _updatedChats$;\n    const updatedChats = [...chats];\n    const defaultPersona = (_updatedChats$ = updatedChats[0]) === null || _updatedChats$ === void 0 ? void 0 : _updatedChats$.persona;\n    if (defaultPersona) {\n      const [modelNameWithoutSuffix] = modelName.split(':latest');\n      defaultPersona.model = modelNameWithoutSuffix;\n      setChats(updatedChats);\n      console.log('Default persona model updated to:', modelNameWithoutSuffix);\n    }\n  };\n  useEffect(() => {\n    fetchLocalModels();\n  }, []); // Empty dependency array means this effect will only run once after the initial render\n\n  const handleAddChat = () => {\n    setChats(prevChats => {\n      const currentChat = chats[selectedChatIndex];\n      console.log('adding chat');\n      console.log(chats);\n      console.log('aaaaaaaaaaaaaaaaaa');\n      const newChat = {\n        ...currentChat,\n        // Copy all properties from the current chat\n        chatHistory: [],\n        // Set an empty chat history\n        name: 'New Chat' // Set a new name (optional)\n      };\n\n      const updatedChats = [...prevChats, newChat];\n      setSelectedChatIndex(updatedChats.length - 1);\n      return updatedChats;\n    });\n  };\n  const handleDeleteChat = chatIndex => {\n    if (chats.length > 1) {\n      const updatedChats = chats.filter((_, index) => index !== chatIndex);\n      setChats(updatedChats);\n      if (chatIndex === selectedChatIndex) {\n        setSelectedChatIndex(Math.max(0, chatIndex - 1));\n      } else if (chatIndex < selectedChatIndex) {\n        setSelectedChatIndex(selectedChatIndex - 1);\n      }\n    } else {\n      alert(\"You must have at least one chat.\");\n    }\n  };\n  const handleUpdateChatHistory = (chatIndex, newMessage) => {\n    if (chatIndex >= 0 && chatIndex < chats.length) {\n      setChats(chats => {\n        const updatedChats = [...chats];\n        const chatToUpdate = updatedChats[chatIndex];\n        if (chatToUpdate) {\n          chatToUpdate.chatHistory = [...chatToUpdate.chatHistory, newMessage];\n        } else {\n          console.error('Chat to update not found');\n        }\n        return updatedChats;\n      });\n      console.log('Chat history updated');\n    } else {\n      console.error('Invalid chat index');\n    }\n  };\n  useEffect(() => {\n    const savedChats = localStorage.getItem('chats');\n    if (savedChats) {\n      setChats(JSON.parse(savedChats));\n    }\n  }, []); // Load chats from local storage on mount\n\n  useEffect(() => {\n    localStorage.setItem('chats', JSON.stringify(chats));\n  }, [chats]); // Save chats to local storage on change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: `App-header ${showSettings ? 'hidden' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: Logo,\n        alt: \"TokenQuill Logo\",\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: (_selectedChat$persona = selectedChat.persona) === null || _selectedChat$persona === void 0 ? void 0 : _selectedChat$persona.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"t\", {\n        children: [\"\\uD83E\\uDDE0: \", (_selectedChat$persona2 = selectedChat.persona) === null || _selectedChat$persona2 === void 0 ? void 0 : _selectedChat$persona2.model]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ChatControlButtons, {\n      onPersonaClick: handleChangePersona\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-content\",\n      children: [/*#__PURE__*/_jsxDEV(ChatSidebar, {\n        chats: chats,\n        onSelectChat: setSelectedChatIndex,\n        onAddChat: handleAddChat,\n        onDeleteChat: handleDeleteChat,\n        selectedChatIndex: selectedChatIndex,\n        setChats: setChats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-section ${showSettings ? 'hidden' : ''}`,\n        children: /*#__PURE__*/_jsxDEV(Chat, {\n          ref: chatRef,\n          systemSettings: selectedChat.persona,\n          selectedChatIndex: selectedChatIndex,\n          chats: chats,\n          setChats: setChats,\n          updateChatHistory: handleUpdateChatHistory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), showSettings && /*#__PURE__*/_jsxDEV(PersonaSettings, {\n        persona: selectedChat.persona,\n        models: models,\n        onChange: handlePersonaChange,\n        onSubmit: handleSaveSettings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jeQJvxiKMQjjjYNiYUNy7d4ufYI=\", false, function () {\n  return [useChat];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useMemo","Chat","ChatControlButtons","PersonaSettings","ChatSidebar","Logo","tq","useChat","jsxDEV","_jsxDEV","App","_s","_selectedChat$persona","_selectedChat$persona2","showSettings","setShowSettings","chats","setChats","selectedChatIndex","setSelectedChatIndex","chatRef","models","setModels","console","log","selectedChat","handleChangePersona","handlePersonaChange","updatedPersona","updatedChats","persona","handleSaveSettings","fetchLocalModels","response","fetch","ok","Error","status","data","json","length","map","model","name","split","latestModel","updateDefaultPersonaModel","error","modelName","_updatedChats$","defaultPersona","modelNameWithoutSuffix","handleAddChat","prevChats","currentChat","newChat","chatHistory","handleDeleteChat","chatIndex","filter","_","index","Math","max","alert","handleUpdateChatHistory","newMessage","chatToUpdate","savedChats","localStorage","getItem","JSON","parse","setItem","stringify","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onPersonaClick","onSelectChat","onAddChat","onDeleteChat","ref","systemSettings","updateChatHistory","onChange","onSubmit","_c","$RefreshReg$"],"sources":["/home/aldan/Desktop/projects/Lush Void/tokenquill/github/TulpaTalk/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport Chat from './components/Chat';\nimport ChatControlButtons from './components/ChatControlButtons';\nimport PersonaSettings from './components/PersonaSettings';\nimport ChatSidebar from './components/SideBar';\nimport './App.css';\nimport Logo from './imgs/QuillBot.png';\nimport tq from './persona';\nimport useChat from './hooks/useChat';\n\n\nfunction App() {\n  const [showSettings, setShowSettings] = useState(false);\n  const { chats, setChats, selectedChatIndex, setSelectedChatIndex } = useChat();\n  const chatRef = useRef();\n  const [models, setModels] = useState([]);\n\n  console.log('rendered app');\n\n  const selectedChat = chats[selectedChatIndex] || {};\n\n  const handleChangePersona = () => setShowSettings(!showSettings);\n  const handlePersonaChange = (updatedPersona) => {\n    const updatedChats = [...chats];\n    updatedChats[selectedChatIndex].persona = updatedPersona;\n    setChats(updatedChats);\n  };\n  const handleSaveSettings = () => setShowSettings(false);\n\n  const fetchLocalModels = async () => {\n    try {\n      const response = await fetch('http://localhost:11434/api/tags');\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Local Models:', data.models);\n      if (data.models && data.models.length > 0) {\n        setModels(data.models.map(model => model.name.split(':latest')[0]));  // Update models state\n        const latestModel = data.models[data.models.length - 1];\n        updateDefaultPersonaModel(latestModel.name);\n      }\n    } catch (error) {\n      console.error('Failed to fetch local models:', error);\n    }\n  };\n\n  const updateDefaultPersonaModel = (modelName) => {\n    const updatedChats = [...chats];\n    const defaultPersona = updatedChats[0]?.persona;\n\n    if (defaultPersona) {\n      const [modelNameWithoutSuffix] = modelName.split(':latest');\n      defaultPersona.model = modelNameWithoutSuffix;\n      setChats(updatedChats);\n      console.log('Default persona model updated to:', modelNameWithoutSuffix);\n    }\n  };\n\n  useEffect(() => {\n    fetchLocalModels();\n  }, []); // Empty dependency array means this effect will only run once after the initial render\n\n  const handleAddChat = () => {\n    setChats((prevChats) => {\n      const currentChat = chats[selectedChatIndex];\n      console.log('adding chat');\n      console.log(chats);\n      console.log('aaaaaaaaaaaaaaaaaa');\n      const newChat = {\n        ...currentChat, // Copy all properties from the current chat\n        chatHistory: [], // Set an empty chat history\n        name: 'New Chat' // Set a new name (optional)\n      };\n\n      const updatedChats = [...prevChats, newChat];\n      setSelectedChatIndex(updatedChats.length - 1);\n      return updatedChats;\n    });\n  };\n\n\n  const handleDeleteChat = (chatIndex) => {\n    if (chats.length > 1) {\n      const updatedChats = chats.filter((_, index) => index !== chatIndex);\n      setChats(updatedChats);\n\n      if (chatIndex === selectedChatIndex) {\n        setSelectedChatIndex(Math.max(0, chatIndex - 1));\n      } else if (chatIndex < selectedChatIndex) {\n        setSelectedChatIndex(selectedChatIndex - 1);\n      }\n    } else {\n      alert(\"You must have at least one chat.\");\n    }\n  };\n\n\n  const handleUpdateChatHistory = (chatIndex, newMessage) => {\n    if (chatIndex >= 0 && chatIndex < chats.length) {\n      setChats(chats => {\n        const updatedChats = [...chats];\n        const chatToUpdate = updatedChats[chatIndex];\n        if (chatToUpdate) {\n          chatToUpdate.chatHistory = [...chatToUpdate.chatHistory, newMessage];\n        } else {\n          console.error('Chat to update not found');\n        }\n        return updatedChats;\n      });\n      console.log('Chat history updated');\n    } else {\n      console.error('Invalid chat index');\n    }\n  };\n\n  useEffect(() => {\n    const savedChats = localStorage.getItem('chats');\n    if (savedChats) {\n      setChats(JSON.parse(savedChats));\n    }\n  }, []); // Load chats from local storage on mount\n\n  useEffect(() => {\n    localStorage.setItem('chats', JSON.stringify(chats));\n  }, [chats]); // Save chats to local storage on change\n\n\n  return (\n    <div className=\"App\">\n    <header className={`App-header ${showSettings ? 'hidden' : ''}`}>\n      <img src={Logo} alt=\"TokenQuill Logo\" className=\"logo\" />\n      <h1>{selectedChat.persona?.name}</h1>\n      <t>🧠: {selectedChat.persona?.model}</t>\n\n    </header>\n      <ChatControlButtons onPersonaClick={handleChangePersona} />\n      <main className=\"App-content\">\n        <ChatSidebar\n        chats={chats}\n        onSelectChat={setSelectedChatIndex}\n        onAddChat={handleAddChat}\n        onDeleteChat={handleDeleteChat}\n        selectedChatIndex={selectedChatIndex}\n        setChats={setChats}\n        />\n        <div className={`chat-section ${showSettings ? 'hidden' : ''}`}>\n        <Chat\n          ref={chatRef}\n          systemSettings={selectedChat.persona}\n          selectedChatIndex={selectedChatIndex}\n          chats={chats}\n          setChats={setChats}\n          updateChatHistory={handleUpdateChatHistory}\n          />\n        </div>\n        {showSettings && <PersonaSettings persona={selectedChat.persona} models={models} onChange={handlePersonaChange} onSubmit={handleSaveSettings} />}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AACnE,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,kBAAkB,MAAM,iCAAiC;AAChE,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAO,WAAW;AAClB,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,EAAE,MAAM,WAAW;AAC1B,OAAOC,OAAO,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EACb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM;IAAEmB,KAAK;IAAEC,QAAQ;IAAEC,iBAAiB;IAAEC;EAAqB,CAAC,GAAGZ,OAAO,CAAC,CAAC;EAC9E,MAAMa,OAAO,GAAGtB,MAAM,CAAC,CAAC;EACxB,MAAM,CAACuB,MAAM,EAAEC,SAAS,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAExC0B,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAE3B,MAAMC,YAAY,GAAGT,KAAK,CAACE,iBAAiB,CAAC,IAAI,CAAC,CAAC;EAEnD,MAAMQ,mBAAmB,GAAGA,CAAA,KAAMX,eAAe,CAAC,CAACD,YAAY,CAAC;EAChE,MAAMa,mBAAmB,GAAIC,cAAc,IAAK;IAC9C,MAAMC,YAAY,GAAG,CAAC,GAAGb,KAAK,CAAC;IAC/Ba,YAAY,CAACX,iBAAiB,CAAC,CAACY,OAAO,GAAGF,cAAc;IACxDX,QAAQ,CAACY,YAAY,CAAC;EACxB,CAAC;EACD,MAAME,kBAAkB,GAAGA,CAAA,KAAMhB,eAAe,CAAC,KAAK,CAAC;EAEvD,MAAMiB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;MAC/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC3D;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MAClChB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEc,IAAI,CAACjB,MAAM,CAAC;MACzC,IAAIiB,IAAI,CAACjB,MAAM,IAAIiB,IAAI,CAACjB,MAAM,CAACmB,MAAM,GAAG,CAAC,EAAE;QACzClB,SAAS,CAACgB,IAAI,CAACjB,MAAM,CAACoB,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;QACtE,MAAMC,WAAW,GAAGP,IAAI,CAACjB,MAAM,CAACiB,IAAI,CAACjB,MAAM,CAACmB,MAAM,GAAG,CAAC,CAAC;QACvDM,yBAAyB,CAACD,WAAW,CAACF,IAAI,CAAC;MAC7C;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdxB,OAAO,CAACwB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;EAED,MAAMD,yBAAyB,GAAIE,SAAS,IAAK;IAAA,IAAAC,cAAA;IAC/C,MAAMpB,YAAY,GAAG,CAAC,GAAGb,KAAK,CAAC;IAC/B,MAAMkC,cAAc,IAAAD,cAAA,GAAGpB,YAAY,CAAC,CAAC,CAAC,cAAAoB,cAAA,uBAAfA,cAAA,CAAiBnB,OAAO;IAE/C,IAAIoB,cAAc,EAAE;MAClB,MAAM,CAACC,sBAAsB,CAAC,GAAGH,SAAS,CAACJ,KAAK,CAAC,SAAS,CAAC;MAC3DM,cAAc,CAACR,KAAK,GAAGS,sBAAsB;MAC7ClC,QAAQ,CAACY,YAAY,CAAC;MACtBN,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE2B,sBAAsB,CAAC;IAC1E;EACF,CAAC;EAEDpD,SAAS,CAAC,MAAM;IACdiC,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMoB,aAAa,GAAGA,CAAA,KAAM;IAC1BnC,QAAQ,CAAEoC,SAAS,IAAK;MACtB,MAAMC,WAAW,GAAGtC,KAAK,CAACE,iBAAiB,CAAC;MAC5CK,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BD,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;MAClBO,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjC,MAAM+B,OAAO,GAAG;QACd,GAAGD,WAAW;QAAE;QAChBE,WAAW,EAAE,EAAE;QAAE;QACjBb,IAAI,EAAE,UAAU,CAAC;MACnB,CAAC;;MAED,MAAMd,YAAY,GAAG,CAAC,GAAGwB,SAAS,EAAEE,OAAO,CAAC;MAC5CpC,oBAAoB,CAACU,YAAY,CAACW,MAAM,GAAG,CAAC,CAAC;MAC7C,OAAOX,YAAY;IACrB,CAAC,CAAC;EACJ,CAAC;EAGD,MAAM4B,gBAAgB,GAAIC,SAAS,IAAK;IACtC,IAAI1C,KAAK,CAACwB,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMX,YAAY,GAAGb,KAAK,CAAC2C,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,KAAKH,SAAS,CAAC;MACpEzC,QAAQ,CAACY,YAAY,CAAC;MAEtB,IAAI6B,SAAS,KAAKxC,iBAAiB,EAAE;QACnCC,oBAAoB,CAAC2C,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,SAAS,GAAG,CAAC,CAAC,CAAC;MAClD,CAAC,MAAM,IAAIA,SAAS,GAAGxC,iBAAiB,EAAE;QACxCC,oBAAoB,CAACD,iBAAiB,GAAG,CAAC,CAAC;MAC7C;IACF,CAAC,MAAM;MACL8C,KAAK,CAAC,kCAAkC,CAAC;IAC3C;EACF,CAAC;EAGD,MAAMC,uBAAuB,GAAGA,CAACP,SAAS,EAAEQ,UAAU,KAAK;IACzD,IAAIR,SAAS,IAAI,CAAC,IAAIA,SAAS,GAAG1C,KAAK,CAACwB,MAAM,EAAE;MAC9CvB,QAAQ,CAACD,KAAK,IAAI;QAChB,MAAMa,YAAY,GAAG,CAAC,GAAGb,KAAK,CAAC;QAC/B,MAAMmD,YAAY,GAAGtC,YAAY,CAAC6B,SAAS,CAAC;QAC5C,IAAIS,YAAY,EAAE;UAChBA,YAAY,CAACX,WAAW,GAAG,CAAC,GAAGW,YAAY,CAACX,WAAW,EAAEU,UAAU,CAAC;QACtE,CAAC,MAAM;UACL3C,OAAO,CAACwB,KAAK,CAAC,0BAA0B,CAAC;QAC3C;QACA,OAAOlB,YAAY;MACrB,CAAC,CAAC;MACFN,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACrC,CAAC,MAAM;MACLD,OAAO,CAACwB,KAAK,CAAC,oBAAoB,CAAC;IACrC;EACF,CAAC;EAEDhD,SAAS,CAAC,MAAM;IACd,MAAMqE,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACdnD,QAAQ,CAACsD,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IAClC;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERrE,SAAS,CAAC,MAAM;IACdsE,YAAY,CAACI,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,SAAS,CAAC1D,KAAK,CAAC,CAAC;EACtD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;;EAGb,oBACEP,OAAA;IAAKkE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACpBnE,OAAA;MAAQkE,SAAS,EAAG,cAAa7D,YAAY,GAAG,QAAQ,GAAG,EAAG,EAAE;MAAA8D,QAAA,gBAC9DnE,OAAA;QAAKoE,GAAG,EAAExE,IAAK;QAACyE,GAAG,EAAC,iBAAiB;QAACH,SAAS,EAAC;MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzDzE,OAAA;QAAAmE,QAAA,GAAAhE,qBAAA,GAAKa,YAAY,CAACK,OAAO,cAAAlB,qBAAA,uBAApBA,qBAAA,CAAsB+B;MAAI;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrCzE,OAAA;QAAAmE,QAAA,GAAG,gBAAI,GAAA/D,sBAAA,GAACY,YAAY,CAACK,OAAO,cAAAjB,sBAAA,uBAApBA,sBAAA,CAAsB6B,KAAK;MAAA;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAElC,CAAC,eACPzE,OAAA,CAACP,kBAAkB;MAACiF,cAAc,EAAEzD;IAAoB;MAAAqD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC3DzE,OAAA;MAAMkE,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC3BnE,OAAA,CAACL,WAAW;QACZY,KAAK,EAAEA,KAAM;QACboE,YAAY,EAAEjE,oBAAqB;QACnCkE,SAAS,EAAEjC,aAAc;QACzBkC,YAAY,EAAE7B,gBAAiB;QAC/BvC,iBAAiB,EAAEA,iBAAkB;QACrCD,QAAQ,EAAEA;MAAS;QAAA8D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB,CAAC,eACFzE,OAAA;QAAKkE,SAAS,EAAG,gBAAe7D,YAAY,GAAG,QAAQ,GAAG,EAAG,EAAE;QAAA8D,QAAA,eAC/DnE,OAAA,CAACR,IAAI;UACHsF,GAAG,EAAEnE,OAAQ;UACboE,cAAc,EAAE/D,YAAY,CAACK,OAAQ;UACrCZ,iBAAiB,EAAEA,iBAAkB;UACrCF,KAAK,EAAEA,KAAM;UACbC,QAAQ,EAAEA,QAAS;UACnBwE,iBAAiB,EAAExB;QAAwB;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EACLpE,YAAY,iBAAIL,OAAA,CAACN,eAAe;QAAC2B,OAAO,EAAEL,YAAY,CAACK,OAAQ;QAACT,MAAM,EAAEA,MAAO;QAACqE,QAAQ,EAAE/D,mBAAoB;QAACgE,QAAQ,EAAE5D;MAAmB;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5I,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACvE,EAAA,CArJQD,GAAG;EAAA,QAE2DH,OAAO;AAAA;AAAAqF,EAAA,GAFrElF,GAAG;AAuJZ,eAAeA,GAAG;AAAC,IAAAkF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}